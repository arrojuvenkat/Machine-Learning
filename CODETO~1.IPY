{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9195391f-52c5-4586-8206-b81a49bf35be",
   "metadata": {},
   "source": [
    "# BREAST CANCER CLASSIFICATION USING SUPPORT VECTOR MACHINES"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1482f288-c18f-412e-93b4-0fb7d5ba5c78",
   "metadata": {},
   "source": [
    "### Dr. Ryan @STEMplicity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24a92845-f319-445f-9bcd-bc01f5a10807",
   "metadata": {},
   "source": [
    "### STEP #1: PROBLEM STATEMENT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49914518-9bcc-405a-9960-56b72de56112",
   "metadata": {},
   "source": [
    "You own an online clothing business and you would like to develop a new app (or in-store) feature in which customers would enter their own height and weight and the system would predict what T-shirt size should they wear. Features are height and weight and output is either L (Large) or S (Small). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a79b771-7196-487b-a5c8-3d8e05b6165b",
   "metadata": {},
   "source": [
    "### DATA SOURCE: https://www.listendata.com/2017/12/k-nearest-neighbor-step-by-step-tutorial.htmll"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73e97088-9a11-4bec-928e-a497ef40d55f",
   "metadata": {},
   "source": [
    "### STEP#0: LIBRARIES IMPORT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8278d9aa-c09c-406c-b437-771c330f724e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08d38ad4-0997-4b61-928b-3393c81abc3c",
   "metadata": {},
   "source": [
    "### STEP#1: IMPORT DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0bdcec7c-0f98-4216-91bc-f0f2a844ee79",
   "metadata": {},
   "outputs": [],
   "source": [
    "Tshirt = pd.read_csv(\"Tshirt_Sizing_Dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7f3544d2-db36-4fb4-adf9-a11dcb5ad9a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Height (in cms)</th>\n",
       "      <th>Weight (in kgs)</th>\n",
       "      <th>T Shirt Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158</td>\n",
       "      <td>58</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>158</td>\n",
       "      <td>59</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>158</td>\n",
       "      <td>63</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>160</td>\n",
       "      <td>59</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>160</td>\n",
       "      <td>60</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>163</td>\n",
       "      <td>60</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>163</td>\n",
       "      <td>61</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>160</td>\n",
       "      <td>64</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>163</td>\n",
       "      <td>64</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>165</td>\n",
       "      <td>61</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>165</td>\n",
       "      <td>62</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>165</td>\n",
       "      <td>65</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>168</td>\n",
       "      <td>62</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>168</td>\n",
       "      <td>63</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>168</td>\n",
       "      <td>66</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>170</td>\n",
       "      <td>63</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>170</td>\n",
       "      <td>64</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>170</td>\n",
       "      <td>68</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Height (in cms)  Weight (in kgs) T Shirt Size\n",
       "0               158               58            S\n",
       "1               158               59            S\n",
       "2               158               63            S\n",
       "3               160               59            S\n",
       "4               160               60            S\n",
       "5               163               60            S\n",
       "6               163               61            S\n",
       "7               160               64            L\n",
       "8               163               64            L\n",
       "9               165               61            L\n",
       "10              165               62            L\n",
       "11              165               65            L\n",
       "12              168               62            L\n",
       "13              168               63            L\n",
       "14              168               66            L\n",
       "15              170               63            L\n",
       "16              170               64            L\n",
       "17              170               68            L"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Tshirt.head(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a44ae90-034d-425a-a886-bebe3b5b5e19",
   "metadata": {},
   "source": [
    "### STEP#2: CREATE TESTING AND TRAINING DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4f97f498-8e57-4e6b-8831-6ce587e78c47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[158,  58],\n",
       "       [158,  59],\n",
       "       [158,  63],\n",
       "       [160,  59],\n",
       "       [160,  60],\n",
       "       [163,  60],\n",
       "       [163,  61],\n",
       "       [160,  64],\n",
       "       [163,  64],\n",
       "       [165,  61],\n",
       "       [165,  62],\n",
       "       [165,  65],\n",
       "       [168,  62],\n",
       "       [168,  63],\n",
       "       [168,  66],\n",
       "       [170,  63],\n",
       "       [170,  64],\n",
       "       [170,  68]], dtype=int64)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = Tshirt.iloc[:, 0:2].values\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0b431fde-97be-4e15-9a8f-5c2a18ffdfdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['S', 'S', 'S', 'S', 'S', 'S', 'S', 'L', 'L', 'L', 'L', 'L', 'L',\n",
       "       'L', 'L', 'L', 'L', 'L'], dtype=object)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = Tshirt.iloc[:, 2].values\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cacc2af8-21a4-46bf-8ece-6aefe34d0c07",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "labelencoder_y = LabelEncoder()\n",
    "y = labelencoder_y.fit_transform(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f779d379-2513-4dca-a12c-6e29696547cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e7cd3b2b-2d50-480a-8400-03a787bf5d0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a399da17-ec7f-4a8e-9414-f4a9df6b0884",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d757a000-9778-469a-8146-e49f1c217fab",
   "metadata": {},
   "source": [
    "### STEP#3: MODEL TRAINING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c55c9ef4-f213-4bd3-9273-37713038d9bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier()"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fitting K-NN to the Training set\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\n",
    "classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53909f01-81f8-4d4d-b104-46841cbaf6fc",
   "metadata": {},
   "source": [
    "### STEP#4: MODEL TESTING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "5892d284-3f01-4256-901a-c3fefa5a3cb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 0, 1])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predicting the Test set results\n",
    "y_pred = classifier.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9bfc5d1a-0822-4b2e-a476-1cfd0e388e99",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Making the Confusion Matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ab8b085c-c809-4970-997b-1764f5e223cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 1],\n",
       "       [1, 1]], dtype=int64)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "b1b6ae2f-bcd5-4048-b6d7-cd23b2d663aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4,3))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8e33140-1b6b-4926-ad3e-4a0fcd0f275f",
   "metadata": {},
   "source": [
    "### STEP#5: TESTING RESULTS VISUALIZATION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "772fabc5-d71a-46c9-a1af-2e0ce41b85b6",
   "metadata": {},
   "source": [
    "#### VISUALIZE TRAINING SET RESULTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9f2b4508-ed5e-44d6-88b8-81bdb2b9eca9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualising the Training set results\n",
    "from matplotlib.colors import ListedColormap\n",
    "X_grid, y_grid = X_train, y_train\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_grid[:, 0].min() - 1, stop = X_grid[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_grid[:, 1].min() - 1, stop = X_grid[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75)\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_grid)):\n",
    "    plt.scatter(X_grid[y_grid == j, 0], X_grid[y_grid == j, 1],\n",
    "                label = j)\n",
    "    \n",
    "plt.title('Training dataset')\n",
    "plt.xlabel('X1')\n",
    "plt.ylabel('X2')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b4104ce-55fb-4705-bf58-2539e58ff074",
   "metadata": {},
   "source": [
    "#### VISUALIZE TEST SET RESULTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "23368322-f6a1-4bd7-b8cd-91367f910658",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.legend(*args, **kwargs) -> 'Legend'>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualising the Training set results\n",
    "from matplotlib.colors import ListedColormap\n",
    "X_grid, y_grid = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_grid[:, 0].min() - 1, stop = X_grid[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_grid[:, 1].min() - 1, stop = X_grid[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75 )\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_grid)):\n",
    "    plt.scatter(X_grid[y_grid == j, 0], X_grid[y_grid == j, 1], label = j)\n",
    "    \n",
    "plt.title('Testing dataset')\n",
    "plt.xlabel('X1')\n",
    "plt.ylabel('X2')\n",
    "plt.legend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b8c03cb-368a-4347-8734-2cbf2644a1ef",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
